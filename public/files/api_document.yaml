openapi: 3.0.0
info:
  version: 1.0.0
  title: TH Design
  description: TH Design
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/lios/THDesign/1.0.0
  - description: Mock dev
    url: https://ngocquang.pw/api
paths:
  /auth/login:
    post:
      summary: Login with email and password
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Login successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
  /auth/register:
    post:
      summary: Register new user
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        200:
          description: Register successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
  /auth/me:
    post:
      summary: Get current user info
      tags:
        - Authentication
      responses:
        200:
          description: Current user info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
  /products:
    post:
      summary: Create new product
      tags:
        - Product
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        200:
          description: Product detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDto'
    get:
      summary: Get all product with pagination
      tags:
        - Product
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: size
          schema:
            type: integer
      responses:
        200:
          description: Data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPageResponse'
  /products/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: Get product detail by ID
      tags:
        - Product
      responses:
        200:
          description: Product detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDto'
    delete:
      summary: Delete product by ID
      description: Require ADMIN role
      tags:
        - Product
      responses:
        200:
          description: Product deleted
          content:
            application/json: {}
  /users:
    get:
      summary: Get users with pagination
      tags:
        - User
      parameters:
        - in: query
          name: page
          schema:
            type: string
        - in: query
          name: size
          schema:
            type: string
      responses:
        200:
          description: Get users with pagination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPageResponse'
    post:
      summary: Create new user
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        200:
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
  /users/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: Get user detail by ID
      tags:
        - User
      responses:
        200:
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
    delete:
      summary: Delete user by ID
      tags:
        - User
      responses:
        200:
          description: User deleted
          content:
            application/json: {}
  /image-set:
    get:
      summary: Get image set with pagination
      tags:
        - Image Set
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: size
          schema:
            type: integer
      responses:
        200:
          description: Image set detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageSetResponse'
    post:
      summary: Upload images
      tags:
        - Image Set
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadImageSetRequest'
      responses:
        200:
          description: Upload image set ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageSetResponse'
  /image-set/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int64
    delete:
      tags:
        - Image Set
      summary: Delete image set by ID
      responses:
        200:
          description: Image set deleted
          content:
            application/json: {}
  /authors:
    post:
      summary: Create author
      tags:
        - Author
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateAuthorRequest'
      responses:
        200:
          description: Author created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorDto'
    get:
      summary: Get author with pagination
      tags:
        - Author
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: size
          schema:
            type: integer
      responses:
        200:
          description: Author with pagination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorPageResponse'
  /authors/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
          format: int64
    get:
      summary: Get author detail by ID
      tags:
        - Author
      responses:
        200:
          description: Author detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorDto'
components:
  schemas:
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
        expires_in:
          type: integer
    RegisterRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        password_confirmation:
          type: string
    UserProfile:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
        role:
          type: string
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        updated_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
    CreateProductRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        published:
          type: boolean
        category_id:
          type: integer
          format: int64
        banner:
          type: string
          format: binary
        thumbnail:
          type: string
          format: binary
        featured_images:
          type: array
          items:
            type: string
            format: binary
        image_set:
          type: array
          items:
            type: integer
            format: int64
        author_id:
          type: integer
          format: int64
      required:
        - name
        - published
        - banner
        - thumbnail
    ProductDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        featured_images:
          type: string
        thumbnail:
          type: string
        banner:
          type: string
        updated_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        image_set:
          $ref: '#/components/schemas/ImageSetResponse'
        author:
          $ref: '#/components/schemas/AuthorDto'
    UserPageResponse:
      type: object
      properties:
        current_page:
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserProfile'
        from:
          type: integer
        to:
          type: integer
        per_page:
          type: integer
    ProductPageResponse:
      type: object
      properties:
        current_page:
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProductDto'
        from:
          type: integer
        to:
          type: integer
        per_page:
          type: integer
    CreateUserRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        password_confirmation:
          type: string
        role:
          type: string
          enum:
            - ADMIN
            - NORMAL_USER
            - EDITOR
      required:
        - name
        - email
        - password
        - password_confirmation
        - role
    UploadImageSetRequest:
      type: object
      properties:
        images:
          type: array
          items:
            type: string
            format: binary
    ImageSetResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        images:
          type: array
          items:
            $ref: '#/components/schemas/ImageDto'
    ImageDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        path:
          type: string
        name:
          type: string
    AuthorPageResponse:
      type: object
      properties:
        current_page:
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/AuthorDto'
        from:
          type: integer
        to:
          type: integer
        per_page:
          type: integer
    AuthorDto:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        avatar:
          type: string
    CreateAuthorRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        avatar:
          type: string
          format: binary
      required:
        - name
        - email